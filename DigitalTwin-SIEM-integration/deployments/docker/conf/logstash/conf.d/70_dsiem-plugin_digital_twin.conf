
###############################################################################
# Dsiem digital_twin Plugin
# Type: SID
#
# Auto-generated by dpluger on 2020-03-17T10:08:31Z
###############################################################################

filter {

# 1st step: identify the source log and clone it to another event with type => siem_events

  if [application] == "digital_twin"  {
    clone {
      clones => [ "siem_events" ]
    }

# 2nd step: remove the source log identifier from the clone, so that the clone will not
# go through the same pipeline as the source log. Also remove the temporary type field,
# replacing it with metadata field that will be read by the rest of siem pipeline.

    if [type] == "siem_events" {
      mutate {
        id => "tag normalizedEvent 1008"
        remove_field => [ "[application]" , "type" ]
        add_field => {
          "[@metadata][siem_plugin_type]" => "digital_twin"
          "[@metadata][siem_data_type]" => "normalizedEvent"
        }
      }
    }
  }
}

# 3rd step: the actual event normalization so that it matches the format that dsiem expect.
#
# Required fields:
#   timestamp (date), title (string), sensor (string), product (string), dst_ip (string), src_ip (string)
#
# For PluginRule type plugin, the following are also required:
#   plugin_id (integer), plugin_sid (integer)
#
# For TaxonomyRule type plugin, the following is also required:
#   category (string)
#
# Optional fields:
# These fields are optional but should be included whenever possible since they can be used in directive rules:
#   dst_port (integer), src_port (integer), protocol (string), subcategory (string)
#
# These fields are also optional and can be used in directive rules. They should be used for custom data that
# are not defined in standard SIEM fields.
#   custom_label1 (string), custom_data1 (string), custom_label2 (string), custom_data2 (string)
#   custom_label3 (string), custom_data3 (string)
#
# And this field is optional, and should be included if the original logs are also stored in elasticsearch.
# This will allow direct pivoting from alarm view in the web UI to the source index.
#   src_index_pattern (string)
#
# As for other fields from source log, they will be removed by logstash plugin prune below

filter {
  if [@metadata][siem_plugin_type] == "digital_twin" {
    translate {
      id => "plugin_sid lookup 1008"
      field => "[twin_message]"
      destination => "[plugin_sid]"
      dictionary => {
        "Internal ENIP tag (SENSOR 2) updated" => "1"
        "Internal ENIP tag (SENSOR 3) updated" => "2"
        "Flow level (SENSOR 2) under SENSOR2_THRESH" => "3"
        "Liquid level (SENSOR 3) under BOTTLE_M['UpperBound']" => "4"
        "Liquid level (SENSOR 3) over BOTTLE_M['UpperBound']" => "5"
        "Liquid level (SENSOR 3) is not received. Program is unable to proceed properly" => "6"
        "Liquid level of tank (SENSOR 1) under LowerBound" => "7"
      }
      fallback => "_translate_failed"
    }

    if [plugin_sid] == "_translate_failed" {
      drop {}
    }

    date {
      id => "timestamp 1008"
      match => [ "[date]", "MM/dd/yyyy HH:mm:ss" ]
      target => [timestamp]
    }
    mutate {
      id => "siem_event fields 1008"
      replace => {
        "title" => "%{[func_name]}"
        "src_index_pattern" => "digital_twin-*"
        "sensor" => "%{[log][file][path]}"
        "product" => "Digital Twin"
        "src_ip" => "%{[ip]}"
        "dst_ip" => "%{[ip]}"
        "protocol" => ""
        "category" => "%{[log_level]}"

        "plugin_id" => "1008"

        "custom_label1" => "twin_message"

        "custom_data1" => "%{[twin_message]}"

      }
    }

    mutate {
      id => "integer fields 1008"
      convert => {
        "plugin_id" => "integer"
        "plugin_sid" => "integer"

      }
    }

    if [custom_data1] == "%{[twin_message]}" { mutate { remove_field => [ "custom_label1", "custom_data1" ]}}

    # delete fields except those included in the whitelist below
    prune {
      whitelist_names => [ "@timestamp$" , "^timestamp$", "@metadata", "^src_index_pattern$", "^title$", "^sensor$", "^product$",
        "^src_ip$", "^dst_ip$", "^plugin_id$", "^plugin_sid$", "^category$", "^subcategory$",
        "^src_port$", "^dst_port$", "^protocol$", "^custom_label1$", "^custom_label2$", "^custom_label3$",
        "^custom_data1$", "^custom_data2$", "^custom_data3$" ]
    }
  }
}
